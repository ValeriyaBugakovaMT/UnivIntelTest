@using Radzen
@typeparam TItem
@implements IRadzenFormComponent
@if (Visible)
{
    @if (ReadOnly)
    {
        @if (Disabled)
        {
            <input step="@Step" min="@Min" max="@Max" name="@Name" disabled="disabled" readonly="readonly" style="@Style" class="textbox ng-untouched ng-pristine ng-valid" type="number"
                   placeholder="@Placeholder" autocomplete="@(autocompleteValue)" value="@Value" onchange="@OnChange" />
        }
        else
        {
            <input step="@Step" min="@Min" max="@Max" name="@Name" readonly="readonly" style="@Style" class="textbox ng-untouched ng-pristine ng-valid" type="number"
                   placeholder="@Placeholder" autocomplete="@(autocompleteValue)" value="@Value" onchange="@OnChange" />
        }
    }
    else
    {
        @if (Disabled)
        {
            <input step="@Step" min="@Min" max="@Max" name="@Name" disabled="disabled" style="@Style" class="textbox ng-untouched ng-pristine ng-valid" type="number"
                   placeholder="@Placeholder" autocomplete="@(autocompleteValue)" value="@Value" onchange="@OnChange" />
        }
        else
        {
            <input step="@Step" min="@Min" max="@Max" name="@Name" style="@Style" class="textbox ng-untouched ng-pristine ng-valid" type="number"
                   placeholder="@Placeholder" autocomplete="@(autocompleteValue)" value="@Value" onchange="@OnChange" />
        }
    }
}
@functions {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Step { get; set; } = "any";

    TItem _value;

    [Parameter]
    public TItem Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (!object.Equals(_value, value))
            {
                _value = value;
                Change?.Invoke(_value);
                ValueChange?.Invoke(Value);
            }
        }
    }

    public bool HasValue
    {
        get
        {
            return !object.Equals(Value, default(TItem));
        }
    }

    dynamic _form;

    [CascadingParameter]
    public dynamic Form
    {
        get
        {
            return _form;
        }
        set
        {
            if (_form != value)
            {
                _form = value;
                _form.AddComponent(this);
            }
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    bool _autocomplete;
    string autocompleteValue = "on";

    [Parameter]
    public bool Autocomplete
    {
        get
        {
            return _autocomplete;
        }
        set
        {
            if (_autocomplete != value)
            {
                _autocomplete = value;
                autocompleteValue = _autocomplete ? "on" : "off";
            }
        }
    }

    protected void OnChange(UIChangeEventArgs args)
    {
        if (string.IsNullOrEmpty(args.Value.ToString()))
        {
            Value = default(TItem);
        }
        else
        {
            Value = (TItem)ConvertType.ChangeType(decimal.Parse(args.Value.ToString()), typeof(TItem));
        }
    }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public decimal? Min { get; set; }

    [Parameter]
    public decimal? Max { get; set; }

    [Parameter]
    public Action<TItem> Change { get; set; }

    [Parameter]
    public Action<object> ValueChange { get; set; }
}