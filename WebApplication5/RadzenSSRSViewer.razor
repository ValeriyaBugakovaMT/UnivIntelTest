@if (Parameters != null)
{
    <CascadingValue Value=this>
        @Parameters
    </CascadingValue>
}
@if (Visible)
{
    <div class="ssrsviewer" style="@Style">
        <iframe frameborder="0" src="@ReportUrl"></iframe>
    </div>
}
@functions {
    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;
    /*
    [Parameter]
    public bool UseProxy { get; set; } = false;
    */
    [Parameter]
    public string ReportServer { get; set; }

    [Parameter]
    public string LocalServer { get; set; }

    [Parameter]
    public string ReportName { get; set; }

    [Parameter]
    public RenderFragment Parameters { get; set; }

    public string ReportUrl
    {
        get
        {
            var urlParams = string.Join("&", parameters.Where(p => !string.IsNullOrEmpty(p.ParameterName)).Select(p => $"{p.ParameterName}={p.Value}"));
            var urlParamString = parameters.Count > 0 ? $"&{urlParams}" : urlParams;

            var url = $"{ReportServer}/Pages/ReportViewer.aspx?%2f{ReportName}&rs:Command=Render&rs:Embed=true{urlParamString}";
            /*
            if (UseProxy)
            {
                if (!string.IsNullOrEmpty(LocalServer))
                {
                    url = $"{LocalServer}/__ssrsreport?url={System.Net.WebUtility.UrlEncode(url)}";
                }
                else
                {
                    url = $"{baseHref}__ssrsreport?url={System.Net.WebUtility.UrlEncode(url)}";
                }
            }*/

            return url;
        }
    }
    /*
    string baseHref;

    protected override async Task OnInitAsync()
    {
        baseHref = await JSRuntime.Current.InvokeAsync<string>("readBaseHref");
    }*/

    List<RadzenSSRSViewerParameter> parameters = new List<RadzenSSRSViewerParameter>();

    public void AddParameter(RadzenSSRSViewerParameter parameter)
    {
        if (parameters.IndexOf(parameter) == -1)
        {
            parameters.Add(parameter);
            StateHasChanged();
        }
    }
}
