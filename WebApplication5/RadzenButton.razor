@if(Visible) 
{
    @if(Disabled) 
    {
        <button style="@Style" disabled="disabled"
            type="@ButtonType"
            class="@($"ui-button ui-button-{Size} ui-widget ui-state-default ui-corner-all btn-{ButtonStyle}")"
            onclick="@((args) => OnClick(args))">
        @if(!string.IsNullOrEmpty(@Icon))
        {
            <i class="ui-button-icon-left pi">@Icon</i>
        }
        @if(!string.IsNullOrEmpty(Text))
        {
            <span class="ui-button-text">@Text</span>
        }
        </button>
    }
    else
    {
        <button style="@Style"
            type="@ButtonType"
            class="@($"ui-button ui-button-{Size} ui-widget ui-state-default ui-corner-all btn-{ButtonStyle}")"
            onclick="@((args) => OnClick(args))">
        @if(!string.IsNullOrEmpty(@Icon))
        {
            <i class="ui-button-icon-left pi">@Icon</i>
        }
        @if(!string.IsNullOrEmpty(Text))
        {
            <span class="ui-button-text">@Text</span>
        }
        </button>
    }
}
@functions {
    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string ButtonStyle { get; set; } = "primary";

    [Parameter]
    public string ButtonType { get; set; } = "button";

    [Parameter]
    public string Size { get; set; } = "md";

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Action<UIMouseEventArgs> Click { get; set; }

    public void OnClick(UIMouseEventArgs args)
    {
        Click?.Invoke(args);
    }
}
